name: Lint Code With RuboCop

on:
  pull_request:
    paths:
      - '**/*.rb'
  push:
    paths:
      - '**/*.rb'

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          bundle config set without 'production staging test'
          bundle install

      - name: Get file changes
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          output: ' '

      - name: Filter files based on RuboCop exclusions
        id: filter_files
        run: |
          require 'yaml'

          rubocop_config = YAML.load_file('.rubocop.yml')
          excluded_paths = rubocop_config['AllCops']['Exclude'].map { |path| File.expand_path(path) }

          changed_files = ENV['CHANGED_FILES'].split
          filtered_files =
            changed_files.reject do |file|
              excluded_paths.any? { |pattern| File.fnmatch(pattern, File.expand_path(file)) }
            end

          puts "Filtered files: #{filtered_files.join(' ')}"
          filtered_files.each { |file| puts "::set-output name=files::#{file}" }

        env:
          CHANGED_FILES: ${{ steps.get_file_changes.outputs.files }}

      - name: Echo file changes
        run: |
          echo Changed files: ${{ steps.get_file_changes.outputs.files }}

      - name: Run RuboCop on changed files
        run: |
          files=$(echo "${{ steps.get_file_changes.outputs.files }}" | tr '\n' ' ')
          if [ -n "$files" ]; then
            echo "Running RuboCop on changed Ruby files..."
            bundle exec rubocop $files
          else
            echo "No Ruby files changed"
          fi
